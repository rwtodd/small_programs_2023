#!/usr/bin/env perl
use v5.36;
use Getopt::Std;
use File::Basename qw(fileparse);

# All the defaults ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my $DownTo720 = undef;    # no downscaling
my $DownTo30FPS = undef;  # no framerate adjustment
my $CopyHEVC = undef;     # no straight video copy
my $crflevel = undef;     # default of 25 CRF
my @chapts = qw/-dn -map_chapters -1/; # don't copy chapts
my @extargs = ();         # no extra arguments
my $dryrun = undef;       # not a dry run
my @quietMode = qw/-hide_banner -loglevel error/; # quiet
my @x265parms = qw/-x265-params log-level=error/; # quiet
my @statusarg = ();       # don't ask for status
my @skipargs = ();        # don't skip any seconds of video
my $keeplarge = undef;    # don't downscale to 720p
my $keepfps   = undef;    # don't cut FPS to 30fps 
my @audioparms = qw/-c:a copy/; # copy audio by default
my $aac_enc = ($^O eq 'darwin') ? 'aac_at' : 'aac';
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# print text in dry-run or verbose mode
sub vecho {
  say(@_) if($dryrun || !@quietMode);
}

# collectinfo <filename>
sub collectinfo($fn) {
  open(my $probe, '-|', 
      "ffprobe -i \"$fn\" -select_streams v:0 -show_entries stream='height,codec_name,r_frame_rate' " . 
      '-of default=noprint_wrappers=1:nokey=0 -v error');
  while(<$probe>) {
    chomp;
    if(m/^codec_name=(.*)$/) {
      vecho("Codec is <$1>");
      $CopyHEVC = $1 eq 'hevc';
    } elsif(m/^height=(\d+)$/) {
      vecho("Height is <$1>");
      $DownTo720 = $1 > 720 && !$keeplarge;
    } elsif(m/^r_frame_rate=([0-9\/]+)$/) {
      my $frate = eval $1 or die "Couldn't evaluate the frame rate! <$1>";
      vecho("Frame rate = <$frate>");
      $DownTo30FPS = !$keepfps && ($frate > 30.0);
    } else {
      vecho("unknown line <$_>");
    }
  }
  close($probe);
  if($DownTo720 || $DownTo30FPS) { $CopyHEVC = undef } # can't adjust and copy!
}

# check for input arguments
my %opts;
getopts('1:2:a:c:de:fhlmsS:v', \%opts) or die "Bad options!";
if($opts{h}) {
  say <<'USAGE';
Usage: convert-mp4s [options] filenames...
  -1 brate   mixdown to 1 channel and use the aac encoder at <brate> rate
  -2 brate   mixdown to 2 channels and use the aac encoder at <brate> rate
  -a brate   use the aac encoder at <brate> rate
  -c crf     to set the CRF level for encoding (default 25)
  -d         for dry-run (don't actually run ffmpeg)
  -e args    to supply extra args to ffmpeg's output section
  -f         keep high framerate (don't reframe to 30fps)
  -l         large (don't downscale to 720p)
  -m         include metadata for chapters (removed by default)
  -s         for encoding status output
  -S secs    skip the given number of seconds of video
  -v         for verbose output
USAGE
  exit(1);
}

@audioparms = ('-ac', '1', '-c:a', $aac_enc, '-b:a', "$opts{1}k") if $opts{1};
@audioparms = ('-ac', '2', '-c:a', $aac_enc, '-b:a', "$opts{2}k") if $opts{2};
@audioparms = ('-c:a', $aac_enc, '-b:a', "$opts{a}k") if $opts{a};
$crflevel = $opts{c} // 25;
$dryrun = 1 if $opts{d};
@chapts = () if $opts{m};
@extargs = split(' ',$opts{e}) if $opts{e};
$keeplarge = 1 if $opts{l};
$keepfps = 1 if $opts{f};
@statusarg = qw/-stats/ if $opts{s};
@skipargs = ('-ss', $opts{S}) if $opts{S};
@quietMode = @x265parms = () if $opts{v};

my $exitCode=0;
while(my $infile = shift) {
  vecho('**********************************************************************');
  vecho("Processing <$infile>");
  if(! -f $infile ) {
    say STDERR "<$infile> does not exist";
    $exitCode=1;
    next; 
  } 

  my $converted = (fileparse($infile,qr/\.[^.]*$/) =~ s/[^[:alnum:]]+/_/gr) . '.mp4';
  vecho("Going to write output <$converted>");
  if( -e $converted) {
    say STDERR "<$converted> output file already exists!";
    $exitCode = 1;
    next;
  }

  collectinfo($infile);
  vecho('CopyHEVC    =  ' . ($CopyHEVC?'yes':'no'));
  vecho('DownTo720   =  ' . ($DownTo720?'yes':'no'));
  vecho('DownTo30FPS =  ' . ($DownTo30FPS?'yes':'no'));
  vecho("CRF Level   =  $crflevel");
  vecho("Audio args  =  <@audioparms>");
  vecho("Extra args  =  <@extargs>") if @extargs;

  if ($dryrun) {
    say 'Would run ffmpeg here, but -d (for dry-run) was given on command line.';
    next;
  } 

  # Build up the ffmpeg command-line in an $args array
  my $thisCRF = $crflevel;
  my @cmd = ('ffmpeg', @quietMode, @statusarg, @skipargs, '-i', $infile, '-sn');
  if ($DownTo720) {
    $thisCRF--;
    vecho("Downscaling to 720p. CRF improved to $thisCRF");
    push @cmd, qw/-vf scale=-1:720/;
  }

  if ($CopyHEVC) {
    push @cmd, qw/-c:v copy/;
  } else {
    push @cmd, qw/-c:v libx265/;
    push @cmd, qw/-r 30/ if($DownTo30FPS);
    push @cmd, ('-crf', $thisCRF);
  }
  
  push @cmd, ('-tag:v', 'hvc1', @x265parms, @audioparms, @chapts, @extargs, $converted);
  vecho("Command is <@cmd>");
  system(@cmd) == 0 or die "ffmpeg died! <$?>";
} continue {
  vecho('');
}
exit($exitCode);

__END__

=head1 NAME

convert-mp4s -- a utility to convert video files to HEVC mp4s via ffmpeg

=head1 SYNOPSYS

  convert-mp4s [options] filenames...

=head1 DESCRIPTION

A wrapper for C<ffmpeg> that converts video files to 720p, 30fps, HEVC mp4s.
Options change these defaults.

=head1 OPTIONS

=over 4

=item -1 rate

Converts the audio to mono at C<rate> kbits/second AAC. On mac it uses the superior C<aac_at> encoder.

=item -2 rate

Converts the audio to stereo at C<rate> kbits/second AAC. On mac it uses the superior C<aac_at> encoder.

=item -a rate

Re-encodes the audio at C<rate> kbits/second AAC. On mac it uses the superior C<aac_at> encoder.

=item -c crf

Sets the CRF level for encoding (default 25). When the picture size must be downscaled to 720p, the CRF
level is improved by 1.  Lower CRF numbers give higher bit-rates.

=item -d 

Indicates that this is a dry-run (don't actually run C<ffmpeg>).

=item -e args

Use this to supply extra args to C<ffmpeg>'s output section.

=item -f 

Keep a high framerate (don't reframe to 30fps).

=item -l

Keep a large video size (don't downscale to 720p).

=item -m 

Include metadata for chapters (removed by default).

=item -s

Writes C<ffmpeg> status during encoding.

=item -S secs

Skips C<secs> seconds from the front of the video.

=item -v

Requests verbose output.

=back

